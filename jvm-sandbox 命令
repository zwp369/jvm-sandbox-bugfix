
/**
* 作业1命令：
**/


## 运行clock 类main方法
mvn exec:java -Dexec.mainClass="com.taobao.demo.Clock"

## mvn 打包
 mvn clean package

## 复制module 的jar包到用户定义的modle中
 cp target/clock-tinker-1.3.1-SNAPSHOT-jar-with-dependencies.jar ~/.sandbox-module/

## 设置可以在任何地方使用sanbox命令
  sandbox () {     cd /Users/seveniruby/temp/java_2/jvm-sandbox/sandbox/bin/;     ./sandbox.sh "$@";     cd $OLDPWD; }

##找出执行的main进程
jps -ml

## 设置pid环境变量
pid=25804

## 运行sandbox
sandbox -p $pid -R

## 查看module是否加载
sandbox -p $pid -l

## 修复bug
sandbox -p $pid -d 'broken-clock-tinker/repairCheckState'

## 停止注入
sandbox -p $pid -S



/**
* 作业2命令：
**/


## 写的一个写文件的类
jvm-sandbox/BrokenClockmodule/src/main/java/com/taobao/demo/HomeWork.java

## 编译类
mvn clean compile

## 运行新的main方法
mvn exec:java -Dexec.mainClass="com.taobao.demo.HomeWork"

## 打包jvm-sandbox的故障注入模块
mvn clean package

## 复制搭到jvm-sandbox 的用户级别模块中（在traget目录下）
cp sandbox-debug-module-1.3.1-jar-with-dependencies.jar ~/.sandbox-module/

## 查处新main的进程号
jps -ml

## 启动sandbox
 sandbox -p 30584

## 查看模块是否加载进来
 sandbox -p 30584 -l

## 运行故障注入
 sandbox -p 30584 -d 'debug-ralph/wreck?class=com.taobao.demo.HomeWork&method=writeFile&type=IOException'


## 看到新main被强制退出



